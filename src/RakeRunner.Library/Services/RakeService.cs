using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using RakeRunner.Library.Models;

namespace RakeRunner.Library.Services
{
    /// <summary>
    /// 
    /// </summary>
    public class RakeService
    {
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool IsRakeInstalled()
        {
            //TODO: Need to know how to check if rake is installed.
            return true;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="directory"></param>
        /// <param name="taskName"></param>
        public void RunRakeTask(string directory, string taskName)
        {
            if (IsRakeInstalled())
            {
                runRakeProcess(directory, taskName);
            }
            else
            {
                throw new InvalidOperationException("Rake is not installed.");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="directory"></param>
        /// <returns></returns>
        public List<RakeTask> GetRakeTasks(string directory)
        {
            if (IsRakeInstalled())
            {
                const string RAKE_WORD = "rake";
                var stringTasks = runRakeProcess(directory, "-P");
                return (from stringTask in stringTasks
                        where stringTask.StartsWith(RAKE_WORD, true, CultureInfo.InvariantCulture)
                        select new RakeTask
                        {
                            Task = stringTask.Substring(RAKE_WORD.Length + 1)
                        }).ToList();
            }
            else
            {
                throw new InvalidOperationException("Rake is not installed.");
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="directory"></param>
        /// <param name="rakeParam"></param>
        /// <returns></returns>
        private List<string> runRakeProcess(string directory, string rakeParam)
        {
            try
            {
                System.Diagnostics.ProcessStartInfo procStartInfo =
                    new System.Diagnostics.ProcessStartInfo("cmd", "/c rake " + rakeParam);
                procStartInfo.WorkingDirectory = directory;
                procStartInfo.RedirectStandardError = true;
                procStartInfo.RedirectStandardOutput = true;
                procStartInfo.UseShellExecute = false;
                // Do not create the black window.
                procStartInfo.CreateNoWindow = true;
                // Now we create a process, assign its ProcessStartInfo and start it
                System.Diagnostics.Process proc = new System.Diagnostics.Process();
                proc.StartInfo = procStartInfo;

                proc.Start();
                proc.WaitForExit();

                if (proc.ExitCode == 0)
                {
                    //split the string by the new lines generated by the rake program
                    return Regex.Split(proc.StandardOutput.ReadToEnd(), "\r\n|\r|\n").ToList();
                }
                else
                {
                    throw new Exception(proc.StandardError.ReadToEnd());

                }
            }
            catch (Exception objException)
            {
                throw;
            }
        }

    }
}
